function e(e,r={},o="en",i,l){let a=null;for(let e in i)if(e==o){a=i[e];break}if(null===a)for(let e in l)if(e==o){a=l[e];break}if(null===a)throw new Error(`Lang "${o}" doesn't exist in locales object. Available locales - ${Object.keys(l).join(", ")}, {Object.keys(userLocales).join(', ')}`);let n=a[e];if(void 0===n)throw new Error(`Key "${e}" does not exist in "${o}" dictionary`);for(let e in r)n=n.replace(`%${e}`,r[e]);return n}function r({validatorConfigValue:r,validatorConfig:o,validatorName:i,fieldName:l,dataValue:a,lang:n,userLocales:t,libLocales:s}){let f="";if(function(e){return"object"==typeof e&&!Array.isArray(e)&&null!==e}(o)){if(!("value"in o))throw new Error('Missing "value" key in validator config');"error"in o&&(f=o.error)}return f||`${l}: `+e(`error-${i}`,{e:r,v:a},n,t,s)}const o={},i={},l=["required"];function a(e,r={},o={}){return e in r?r[e]:e in o?o[e]:null}function n(n,t,s="en",f={}){let u=[];"locales"in f||(f.locales={}),"validators"in f||(f.validators={});for(let c in n){const d=n[c],v=!("required"in d)||d.required;let g;if(t.hasOwnProperty(c)){g=t[c];for(let n in d){if(l.includes(n))continue;const t=a(n,f.validators,i);if(!t&&"custom"!=n)throw new Error(e("error-unknown-validator",{v:n},s,f.locales,o));const v=d[n];let w=v;if(a("isObject",f.validators,i)(v)){if(!("value"in v))throw new Error(e("error-validator-config-is-missing-value",{v:n},s,f.locales,o));w=v.value}if("custom"===n){const e=Array.isArray(v)?v:[v];for(let r of e){const e=r(g);for(let r of e.errors)u.push(r)}}else{if(!t(g,w,v)){const e=r({validatorConfigValue:w,validatorConfig:v,validatorName:n,fieldName:c,dataValue:g,lang:s,userLocales:f.locales,libLocales:o});u.push(e)}}}}else v&&u.push(e("field-required",{fieldName:c},s,f.locales,o))}return{isValid:0===u.length,errors:u}}export{n as default};
