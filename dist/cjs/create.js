function r(r,e={},o="en",i,a){if(!(o in i)&&!(o in a))throw new Error(`Lang "${o}" doesn't exist in locales object. Available locales - ${Object.keys(a).join(", ")}, {Object.keys(userLocales).join(', ')}`);let l=i?.[o]?.[r]||a?.[o]?.[r];if(void 0===l)throw new Error(`Key "${r}" does not exist in "${o}" dictionary`);for(let r in e)l=l.replace(`%${r}`,e[r]);return l}function e({validatorConfigValue:e,validatorConfig:o,validatorName:i,fieldName:a,dataValue:l,lang:n,userLocales:t,libLocales:s}){let u="";if(function(r){return"object"==typeof r&&!Array.isArray(r)&&null!==r}(o)){if(!("value"in o))throw new Error('Missing "value" key in validator config');"error"in o&&(u=o.error)}return u||`${a}: `+r(`error-${i}`,{e:e,v:l},n,t,s)}module.exports=function(o){if(!("locales"in o))throw new Error("options.locales is required to be defined");if(!("validators"in o))throw new Error("options.validators is required to be defined");const i=o.locales,a=o.validators;function l(r,e={},o={}){return r in e?e[r]:r in o?o[r]:null}return function(o,n,t="en",s={}){let u=[];"locales"in s||(s.locales={}),"validators"in s||(s.validators={});for(let d in o){const f=o[d],c=!("required"in f)||f.required;let v;if(n.hasOwnProperty(d)){v=n[d];for(let o in f){if("required"==o)continue;const n=l(o,s.validators,a);if(!n&&"custom"!=o)throw new Error(r("error-unknown-validator",{v:o},t,s.locales,i));const c=f[o];let w=c;if(l("isObject",s.validators,a)(c)){if(!("value"in c))throw new Error(r("error-validator-config-is-missing-value",{v:o},t,s.locales,i));w=c.value}if("custom"===o){const r=Array.isArray(c)?c:[c];for(let e of r){const r=e(v);if(!Array.isArray(r))throw new Error(`Custom validator (field: ${d}): Custom validator should return array of errors. Got - ${typeof r}`);for(let e of r)""!==e&&u.push(e)}}else n(v,w,c)||u.push(e({validatorConfigValue:w,validatorConfig:c,validatorName:o,fieldName:d,dataValue:v,lang:t,userLocales:s.locales,libLocales:i}))}}else c&&u.push(r("field-required",{fieldName:d},t,s.locales,i))}return{isValid:0===u.length,errors:u}}};
