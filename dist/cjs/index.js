const e={en:{"error-min":'Min value should be "%e", current value is "%v"',"error-isNumber":'Value "%v" should be number',"error-isString":'Value "%v" should be string',"error-isEmail":'"%v" is not a valid email',"error-isDate":'"%v" is not a valid date',"error-minLength":'Min length should be "%e"',"error-isBoolean":'Value "%v" is not boolean or not equal "%e"',"error-validator-config-is-missing-value":'Validator "%v" config is an object, "value" key is required',"error-unknown-validator":'Unknown validator "%v", make sure you incuded this validator'}};function r(e,r){return e>=r}function i(e,r){return e.length>=r}function o(e){return"number"==typeof e}function n(e){return"string"==typeof e}function t(e){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)}function a(e){return"boolean"==typeof e}function l(e){return!isNaN(Date.parse(e))}function s(e){return"object"==typeof e&&!Array.isArray(e)&&null!==e}function u(e){return Array.isArray(e)}const c={min:r,minLength:i,isNumber:o,isString:n,isEmail:t,isBoolean:a,isDate:l,isObject:s,isArray:u};function f(e,r={},i="en",o,n){let t=null;for(let e in o)if(e==i){t=o[e];break}if(null===t)for(let e in n)if(e==i){t=n[e];break}if(null===t)throw new Error(`Lang "${i}" doesn't exist in locales object. Available locales - ${Object.keys(n).join(", ")}, {Object.keys(userLocales).join(', ')}`);let a=t[e];if(void 0===a)throw new Error(`Key "${e}" does not exist in "${i}" dictionary`);for(let e in r)a=a.replace(`%${e}`,r[e]);return a}function d({validatorConfigValue:e,validatorConfig:r,validatorName:i,fieldName:o,dataValue:n,lang:t,userLocales:a,libLocales:l}){let u="";if(s(r)){if(!("value"in r))throw new Error('Missing "value" key in validator config');"error"in r&&(u=r.error)}return u||`${o}: `+f(`error-${i}`,{e:e,v:n},t,a,l)}const v=["required"];function g(e,r={},i={}){return e in r?r[e]:e in i?i[e]:null}exports.isArray=u,exports.isBoolean=a,exports.isDate=l,exports.isEmail=t,exports.isNumber=o,exports.isObject=s,exports.isString=n,exports.locales=e,exports.min=r,exports.minLength=i,exports.validate=function(r,i,o="en",n={}){let t=[];"locales"in n||(n.locales={}),"validators"in n||(n.validators={});for(let a in r){const l=r[a],s=!("required"in l)||l.required;let u;if(i.hasOwnProperty(a)){u=i[a];for(let r in l){if(v.includes(r))continue;const i=g(r,n.validators,c);if(!i&&"custom"!=r)throw new Error(f("error-unknown-validator",{v:r},o,n.locales,e));const s=l[r];let m=s;if(g("isObject",n.validators,c)(s)){if(!("value"in s))throw new Error(f("error-validator-config-is-missing-value",{v:r},o,n.locales,e));m=s.value}if("custom"===r){const e=Array.isArray(s)?s:[s];for(let r of e){const e=r(u);for(let r of e.errors)t.push(r)}}else{if(!i(u,m,s)){const i=d({validatorConfigValue:m,validatorConfig:s,validatorName:r,fieldName:a,dataValue:u,lang:o,userLocales:n.locales,libLocales:e});t.push(i)}}}}else s&&t.push(f("field-required",{fieldName:a},o,n.locales,e))}return{isValid:0===t.length,errors:t}},exports.validators=c;
