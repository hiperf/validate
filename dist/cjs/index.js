const r={en:{"error-min":'Min value should be "%e", current value is "%v"',"error-isNumber":'Value "%v" should be number',"error-isString":'Value "%v" should be string',"error-isEmail":'"%v" is not a valid email',"error-isDate":'"%v" is not a valid date',"error-minLength":'Min length should be "%e"',"error-isBoolean":'Value "%v" is not boolean or not equal "%e"',"error-validator-config-is-missing-value":'Validator "%v" config is an object, "value" key is required',"error-unknown-validator":'Unknown validator "%v", make sure you incuded this validator'}};function e(r,e){return r>=e}function o(r,e){return r.length>=e}function i(r){return"number"==typeof r}function n(r){return"string"==typeof r}function t(r){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(r)}function a(r){return"boolean"==typeof r}function s(r){return!isNaN(Date.parse(r))}function l(r){return"object"==typeof r&&!Array.isArray(r)&&null!==r}function u(r){return Array.isArray(r)}const c={min:e,minLength:o,isNumber:i,isString:n,isEmail:t,isBoolean:a,isDate:s,isObject:l,isArray:u};function f(r,e={},o="en",i,n){if(!(o in i)&&!(o in n))throw new Error(`Lang "${o}" doesn't exist in locales object. Available locales - ${Object.keys(n).join(", ")}, {Object.keys(userLocales).join(', ')}`);let t=i?.[o]?.[r]||n?.[o]?.[r];if(void 0===t)throw new Error(`Key "${r}" does not exist in "${o}" dictionary`);for(let r in e)t=t.replace(`%${r}`,e[r]);return t}function d({validatorConfigValue:r,validatorConfig:e,validatorName:o,fieldName:i,dataValue:n,lang:t,userLocales:a,libLocales:s}){let u="";if(l(e)){if(!("value"in e))throw new Error('Missing "value" key in validator config');"error"in e&&(u=e.error)}return u||`${i}: `+f(`error-${o}`,{e:r,v:n},t,a,s)}function v(r,e={},o={}){return r in e?e[r]:r in o?o[r]:null}exports.isArray=u,exports.isBoolean=a,exports.isDate=s,exports.isEmail=t,exports.isNumber=i,exports.isObject=l,exports.isString=n,exports.locales=r,exports.min=e,exports.minLength=o,exports.validate=function(e,o,i="en",n={}){let t=[];"locales"in n||(n.locales={}),"validators"in n||(n.validators={});for(let a in e){const s=e[a],l=!("required"in s)||s.required;let u;if(o.hasOwnProperty(a)){u=o[a];for(let e in s){if("required"==e)continue;const o=v(e,n.validators,c);if(!o&&"custom"!=e)throw new Error(f("error-unknown-validator",{v:e},i,n.locales,r));const l=s[e];let m=l;if(v("isObject",n.validators,c)(l)){if(!("value"in l))throw new Error(f("error-validator-config-is-missing-value",{v:e},i,n.locales,r));m=l.value}if("custom"===e){const r=Array.isArray(l)?l:[l];for(let e of r){const r=e(u);if(!Array.isArray(r))throw new Error(`Custom validator (field: ${a}): Custom validator should return array of errors. Got - ${typeof r}`);for(let e of r)""!==e&&t.push(e)}}else o(u,m,l)||t.push(d({validatorConfigValue:m,validatorConfig:l,validatorName:e,fieldName:a,dataValue:u,lang:i,userLocales:n.locales,libLocales:r}))}}else l&&t.push(f("field-required",{fieldName:a},i,n.locales,r))}return{isValid:0===t.length,errors:t}},exports.validators=c;
